// Signature format: 4.0
package  {

  public class BasePublishingDestination extends PublishingDestination {
    ctor public BasePublishingDestination(Object releases, boolean requiredCertificate, optional Object snapshots);
    method public boolean equals(Object? other);
    method public boolean getRequiredCertificate();
    method public Object getUrl();
    method public int hashCode();
    property public boolean requiredCertificate;
    property public Object url;
  }

  public final class DirectoryDestination extends BasePublishingDestination {
    ctor public DirectoryDestination(String releasesPath, optional String snapshotsPath);
    ctor public DirectoryDestination(error.NonExistentClass releases, optional error.NonExistentClass snapshots);
    ctor public DirectoryDestination(error.NonExistentClass releases, optional error.NonExistentClass snapshots);
    method public DirectoryDestination copy(String releasesPath, String snapshotsPath);
    method public String toString();
  }

  public enum DokkaFormat {
    method public final String! getTaskName();
    property public final String! taskName;
    enum_constant public static final DokkaFormat Gfm;
    enum_constant public static final DokkaFormat Html;
    enum_constant public static final DokkaFormat Javadoc;
    enum_constant public static final DokkaFormat Jekyll;
  }

  public final class DokkaFormatKt {
    method public static void dokka(org.gradle.api.Project, kotlin.jvm.functions.Function1<? super org.jetbrains.dokka.gradle.DokkaTask,kotlin.Unit> configuration);
    method public static void dokka(org.gradle.api.Project, optional DokkaFormat format, kotlin.jvm.functions.Function1<? super org.jetbrains.dokka.gradle.DokkaTask,kotlin.Unit> configuration);
  }

  public final class MavenLocalDestination extends BasePublishingDestination {
    field public static final MavenLocalDestination INSTANCE;
  }

  public final class PublicationsKt {
    method public static com.meowool.gradle.toolkit.publisher.PublicationExtension getPublication(org.gradle.api.Project);
    method public static void publication(org.gradle.api.Project, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.publisher.PublicationExtension,kotlin.Unit> configuration);
    method public static error.NonExistentClass! publications(error.NonExistentClass, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.publisher.PublicationExtension,kotlin.Unit> configuration);
  }

  public final class PublishTasksKt {
    method public static void disablePublishTask(org.gradle.api.Project);
  }

  public abstract class PublishingDestination {
    ctor public PublishingDestination();
    method public final org.gradle.api.Project getProject();
    method public abstract boolean getRequiredCertificate();
    method public abstract Object getUrl();
    method public final boolean isSnapshot();
    method public final void setProject(org.gradle.api.Project project);
    property public final boolean isSnapshot;
    property public final org.gradle.api.Project project;
    property public abstract boolean requiredCertificate;
    property public abstract Object url;
    field public org.gradle.api.Project project;
  }

  public final class SonatypeDestination extends PublishingDestination {
    ctor public SonatypeDestination(optional boolean s01);
    method public boolean equals(Object? other);
    method public String getBaseUrl();
    method public boolean getRequiredCertificate();
    method public Object getUrl();
    method public int hashCode();
    property public final String baseUrl;
    property public boolean requiredCertificate;
    property public Object url;
  }

}

package com.meowool.gradle.toolkit.publisher {

  public final class PublicationData {
    ctor public PublicationData(org.gradle.api.Project project);
    method public void developer(kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.publisher.PublicationData.Developer,kotlin.Unit> configuration);
    method public String getArtifactId();
    method public String? getDescription();
    method public java.util.Set<com.meowool.gradle.toolkit.publisher.PublicationData.Developer> getDevelopers();
    method public String getDisplayName();
    method public String getGroupId();
    method public java.util.Set<com.meowool.gradle.toolkit.publisher.PublicationData.License> getLicenses();
    method public String? getOrganizationName();
    method public String? getOrganizationUrl();
    method public String getPluginId();
    method public java.util.Set<java.lang.String> getTags();
    method public String? getUrl();
    method public String? getVcs();
    method public String getVersion();
    method public void license(kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.publisher.PublicationData.License,kotlin.Unit> configuration);
    method public void pom(kotlin.jvm.functions.Function1<? super org.gradle.api.publish.maven.MavenPom,kotlin.Unit> configuration);
    method public void setArtifactId(String value);
    method public void setDescription(String? value);
    method public void setDisplayName(String value);
    method public void setGroupId(String value);
    method public void setOrganizationName(String? value);
    method public void setOrganizationUrl(String? value);
    method public void setPluginId(String value);
    method public void setUrl(String? value);
    method public void setVcs(String? value);
    method public void setVersion(String value);
    method public void tags(java.lang.String... tags);
    property public final String artifactId;
    property public final String? description;
    property public final java.util.Set<com.meowool.gradle.toolkit.publisher.PublicationData.Developer> developers;
    property public final String displayName;
    property public final String groupId;
    property public final java.util.Set<com.meowool.gradle.toolkit.publisher.PublicationData.License> licenses;
    property public final String? organizationName;
    property public final String? organizationUrl;
    property public final String pluginId;
    property public final java.util.Set<java.lang.String> tags;
    property public final String? url;
    property public final String? vcs;
    property public final String version;
  }

  public static final class PublicationData.Developer {
    ctor public PublicationData.Developer(optional String? id, optional String? name, optional String? email, optional String? url);
    method public String? component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public com.meowool.gradle.toolkit.publisher.PublicationData.Developer copy(String? id, String? name, String? email, String? url);
    method public boolean equals(Object? other);
    method public String? getEmail();
    method public String? getId();
    method public String? getName();
    method public String? getUrl();
    method public int hashCode();
    method public void setEmail(String? email);
    method public void setId(String? id);
    method public void setName(String? name);
    method public void setUrl(String? url);
    method public String toString();
    property public final String? email;
    property public final String? id;
    property public final String? name;
    property public final String? url;
  }

  public static final class PublicationData.License {
    ctor public PublicationData.License(optional String? name, optional String? url);
    method public String? component1();
    method public String? component2();
    method public com.meowool.gradle.toolkit.publisher.PublicationData.License copy(String? name, String? url);
    method public boolean equals(Object? other);
    method public String? getName();
    method public String? getUrl();
    method public int hashCode();
    method public void setName(String? name);
    method public void setUrl(String? url);
    method public String toString();
    property public final String? name;
    property public final String? url;
  }

  public final class PublicationExtension {
    ctor public PublicationExtension(org.gradle.api.Project project);
    method public com.meowool.gradle.toolkit.publisher.PublicationData data(kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.publisher.PublicationData,kotlin.Unit> configuration);
    method public void dokkaFormat(DokkaFormat format);
    method public com.meowool.gradle.toolkit.publisher.PublicationData getData();
    method public java.util.Set<PublishingDestination> getDestinations();
    method public DokkaFormat? getDokkaFormat();
    method public String? getPluginClass();
    method public Boolean? getShowIncompatibleWarnings();
    method public boolean isLocalVersion();
    method public Boolean? isSignRelease();
    method public Boolean? isSignSnapshot();
    method public boolean isSnapshotVersion();
    method public void publishTo(PublishingDestination... destinations);
    method public void publishToDirectory(String releasesPath, optional String snapshotsPath);
    method public void publishToDirectory(error.NonExistentClass releases, optional error.NonExistentClass snapshots);
    method public void publishToDirectory(error.NonExistentClass releases, optional error.NonExistentClass snapshots);
    method public void publishToMavenLocal();
    method public void publishToSonatype(optional boolean s01);
    method public void setDokkaFormat(DokkaFormat? dokkaFormat);
    method public void setPluginClass(String? pluginClass);
    method public void setShowIncompatibleWarnings(Boolean? showIncompatibleWarnings);
    method public void setSignRelease(Boolean? isSignRelease);
    method public void setSignSnapshot(Boolean? isSignSnapshot);
    method public void signRelease(optional boolean isSign);
    method public void signSnapshot(optional boolean isSign);
    property public final com.meowool.gradle.toolkit.publisher.PublicationData data;
    property public final java.util.Set<PublishingDestination> destinations;
    property public final DokkaFormat? dokkaFormat;
    property public final boolean isLocalVersion;
    property public final Boolean? isSignRelease;
    property public final Boolean? isSignSnapshot;
    property public final boolean isSnapshotVersion;
    property public final String? pluginClass;
    property public final Boolean? showIncompatibleWarnings;
  }

  public final class PublisherPlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public PublisherPlugin();
    method public void apply(org.gradle.api.Project target);
  }

}


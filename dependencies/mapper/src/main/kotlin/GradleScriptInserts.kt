import com.meowool.sweekt.removeBlanks
import com.meowool.sweekt.substringAfter
import com.meowool.sweekt.substringBefore

private const val BuildscriptBlock = "buildscript"

/** buildscript { dependencies.classpath(..) } */
internal fun createBuildscriptBlock(source: String, classpathLine: String): String = buildString {
  append("$BuildscriptBlock { ")
  append("dependencies.")
  append(classpathLine)
  append(" }")
  appendLine(source)
}

internal fun insertClasspath(source: String, classpathLine: String): String {
  // buildscript { .. }
  return when (source.hasBuildscriptBlock()) {
    false -> createBuildscriptBlock(source, classpathLine)
    // Append new line to after `buildscript {`
    else -> {
      var index = source.indexOf(BuildscriptBlock)
      for (char in source.substringAfter(index)) {
        index++
        // n spaces: `buildscript   {`
        if (char == '{') {
          return buildString {
            appendLine(source.substringBefore(index + 1))
            appendLine("!! 请手动调整下面代码的缩进或者位置，然后删除这些警告 // 由这个项目中引用的 meowool-dependencies-generator 生成")
            appendLine("!! Please manually adjust the indentation or position here, and then remove these warnings // this is the classpath generated by meowool-dependencies-generator")
            appendLine("!! for more details: https://github.com/meowool-toolkit/gradle-dsl-x/tree/master/dependencies/generator")
            append("dependencies.")
            appendLine(classpathLine)
            append(source.substringAfter(index))
          }
        }
      }
      error("Unable to insert `classpath`")
    }
  }
}

internal fun String.hasBuildscriptBlock() = this.removeLineBreaks().removeBlanks().contains("$BuildscriptBlock{")

// TODO Migration
internal fun String.removeLineBreaks() = replace("\n", "").replace("\r", "").replace("\r\n", "")
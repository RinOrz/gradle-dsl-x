// Signature format: 4.0
package  {

  public final class AndroidExtensionsKt {
    method public static void androidApp(org.gradle.api.Project, optional Object key, optional kotlin.jvm.functions.Function1<? super com.android.build.gradle.internal.dsl.BaseAppModuleExtension,kotlin.Unit> configuration);
    method public static void androidKotlinApp(org.gradle.api.Project, optional Object key, optional kotlin.jvm.functions.Function1<? super com.android.build.gradle.internal.dsl.BaseAppModuleExtension,kotlin.Unit> configuration);
    method public static void androidKotlinLib(org.gradle.api.Project, optional Object key, optional kotlin.jvm.functions.Function1<? super com.android.build.gradle.LibraryExtension,kotlin.Unit> configuration);
    method public static void androidLib(org.gradle.api.Project, optional Object key, optional kotlin.jvm.functions.Function1<? super com.android.build.gradle.LibraryExtension,kotlin.Unit> configuration);
  }

  public final class AndroidLogicsKt {
    method public static error.NonExistentClass! android(error.NonExistentClass, optional Object key, kotlin.jvm.functions.Function2<? super com.android.build.gradle.TestedExtension,? super org.gradle.api.Project,kotlin.Unit> logic);
    method public static error.NonExistentClass! androidApp(error.NonExistentClass, optional Object key, kotlin.jvm.functions.Function2<? super com.android.build.gradle.internal.dsl.BaseAppModuleExtension,? super org.gradle.api.Project,kotlin.Unit> logic);
    method public static error.NonExistentClass! androidLib(error.NonExistentClass, optional Object key, kotlin.jvm.functions.Function2<? super com.android.build.gradle.LibraryExtension,? super org.gradle.api.Project,kotlin.Unit> logic);
    method public static void injectAndroidAppLogic(org.gradle.api.Project, optional Object key, optional boolean ignoreUnregistered);
    method public static void injectAndroidLibLogic(org.gradle.api.Project, optional Object key, optional boolean ignoreUnregistered);
    method public static void injectAndroidLogic(org.gradle.api.Project, optional Object key, optional boolean ignoreUnregistered);
  }

  public final class AndroidSourceSetContainersKt {
    method public static <T extends com.android.build.api.dsl.AndroidSourceSet> void androidTest(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.gradle.api.AndroidSourceSet> T androidTest(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static com.android.build.api.dsl.AndroidSourceSet getAndroidTest(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet>);
    method public static com.android.build.gradle.api.AndroidSourceSet getAndroidTest(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.gradle.api.AndroidSourceSet>);
    method public static com.android.build.api.dsl.AndroidSourceSet getMain(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet>);
    method public static com.android.build.gradle.api.AndroidSourceSet getMain(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.gradle.api.AndroidSourceSet>);
    method public static com.android.build.api.dsl.AndroidSourceSet getTest(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet>);
    method public static com.android.build.gradle.api.AndroidSourceSet getTest(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.gradle.api.AndroidSourceSet>);
    method public static <T extends com.android.build.api.dsl.AndroidSourceSet> void main(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.gradle.api.AndroidSourceSet> T main(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.api.dsl.AndroidSourceSet> void test(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.gradle.api.AndroidSourceSet> T test(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
  }

  public final class AndroidTasksKt {
    method public static org.gradle.api.Task? findAndroidTask(org.gradle.api.Project, String name, optional boolean ignoreCase);
  }

  public final class BaseExtensionsKt {
    method public static inline void applicationId(com.android.build.gradle.BaseExtension, String applicationId);
    method public static inline void buildConfigField(com.android.build.gradle.BaseExtension, String type, String name, String value);
    method public static boolean isApplication(com.android.build.gradle.BaseExtension);
    method public static boolean isLibrary(com.android.build.gradle.BaseExtension);
    method public static inline void minSdk(com.android.build.gradle.BaseExtension, String version);
    method public static inline void minSdk(com.android.build.gradle.BaseExtension, int version);
    method public static inline void targetSdk(com.android.build.gradle.BaseExtension, String version);
    method public static inline void targetSdk(com.android.build.gradle.BaseExtension, int version);
    method public static inline void versionCode(com.android.build.gradle.BaseExtension, int code);
    method public static inline void versionName(com.android.build.gradle.BaseExtension, String name);
    method public static inline void versionNameSuffix(com.android.build.gradle.BaseExtension, String name);
  }

  public final class BuildTypesKt {
    method public static <T extends com.android.build.api.dsl.BuildType> void debug(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static com.android.build.api.dsl.BuildType getDebug(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.BuildType>);
    method public static com.android.build.api.dsl.BuildType getRelease(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.BuildType>);
    method public static <T extends com.android.build.api.dsl.BuildType> void release(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
  }

  public final class ComposeKt {
    method public static void enableCompose(com.android.build.gradle.BaseExtension, optional kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ComposeOptions,kotlin.Unit> configuration);
  }

  public final class ExternalNativeBuildsKt {
    method public static void cmake(org.gradle.api.Project, optional error.NonExistentClass? path, optional kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Cmake,kotlin.Unit> configuration);
    method public static void cmake(org.gradle.api.Project, String? path, optional kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Cmake,kotlin.Unit> configuration);
    method public static error.NonExistentClass! findCMakeBuildScript(org.gradle.api.Project);
    method public static error.NonExistentClass! findNdkBuildScript(org.gradle.api.Project);
    method public static void ndkBuild(org.gradle.api.Project, optional error.NonExistentClass? path, optional kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.NdkBuild,kotlin.Unit> configuration);
    method public static void ndkBuild(org.gradle.api.Project, String? path, optional kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.NdkBuild,kotlin.Unit> configuration);
  }

  public enum NdkAbi {
    method public final String! getAbi();
    property public final String! abi;
    enum_constant public static final NdkAbi Arm64_v8a;
    enum_constant public static final NdkAbi Armeabi;
    enum_constant public static final NdkAbi Armeabi_v7a;
    enum_constant public static final NdkAbi X86;
    enum_constant public static final NdkAbi X86_64;
  }

  public final class NdksKt {
    method public static void abiFilters(com.android.build.gradle.BaseExtension, NdkAbi... abi);
    method public static void abiFilters(com.android.build.gradle.BaseExtension, java.util.List<? extends NdkAbi> abis);
  }

  public final class OutputsKt {
    method public static void outputTo(com.android.build.gradle.AppExtension, error.NonExistentClass targetDirectory, optional boolean overwrite);
    method public static void outputTo(com.android.build.gradle.LibraryExtension, error.NonExistentClass targetDirectory, optional boolean overwrite);
    method public static void outputTo(com.android.build.gradle.TestedExtension, error.NonExistentClass targetDirectory, optional boolean overwrite);
  }

  public final class SigningConfigContainerKt {
    method public static <T extends com.android.build.api.dsl.SigningConfig> void debug(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.gradle.internal.dsl.SigningConfig> T debug(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static com.android.build.api.dsl.SigningConfig getDebug(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.SigningConfig>);
    method public static com.android.build.gradle.internal.dsl.SigningConfig getDebug(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.gradle.internal.dsl.SigningConfig>);
    method public static com.android.build.api.dsl.SigningConfig getRelease(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.SigningConfig>);
    method public static com.android.build.gradle.internal.dsl.SigningConfig getRelease(org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.gradle.internal.dsl.SigningConfig>);
    method public static <T extends com.android.build.api.dsl.SigningConfig> void release(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
    method public static <T extends com.android.build.gradle.internal.dsl.SigningConfig> T release(org.gradle.api.NamedDomainObjectContainer<T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> configuration);
  }

  public final class SigningsKt {
    method public static void debugSigning(com.android.build.gradle.BaseExtension, kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.SigningConfig,kotlin.Unit> configuration);
    method public static void loadKeyProperties(com.android.build.api.dsl.SigningConfig, error.NonExistentClass file);
    method public static error.NonExistentClass! loadKeyProperties(com.android.build.api.dsl.SigningConfig, String path);
    method public static void releaseSigning(com.android.build.gradle.BaseExtension, kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.SigningConfig,kotlin.Unit> configuration);
    method public static void signing(com.android.build.gradle.BaseExtension, kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.SigningConfig,kotlin.Unit> configuration);
  }

  public final class VariantsKt {
    method public static void applicationVariants(com.android.build.gradle.AppExtension, kotlin.jvm.functions.Function1<? super com.android.build.gradle.api.ApplicationVariant,kotlin.Unit> configuration);
    method public static void libraryVariants(com.android.build.gradle.LibraryExtension, kotlin.jvm.functions.Function1<? super com.android.build.gradle.api.LibraryVariant,kotlin.Unit> configuration);
    method public static void testVariants(com.android.build.gradle.TestedExtension, kotlin.jvm.functions.Function1<? super com.android.build.gradle.api.TestVariant,kotlin.Unit> configuration);
    method public static void variants(com.android.build.gradle.BaseExtension, kotlin.jvm.functions.Function1<? super com.android.build.gradle.api.BaseVariant,kotlin.Unit> configuration);
  }

}

package com.meowool.gradle.toolkit.android.internal {

  public final class AndroidLogicRegistry {
    field public static final String DefaultCandidateAndroidKey = "default android candidate logic";
    field public static final com.meowool.gradle.toolkit.android.internal.AndroidLogicRegistry INSTANCE;
  }

  public final class ConstantsKt {
  }

  public final class PluginsKt {
  }

  public final class PresetsKt {
  }

}

package org.gradle.kotlin.dsl {

  @org.gradle.api.Generated public final class Accessors11xxvwy0y6zsdmgi5tg7sgrcqKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors12l04gyw3iri7cbpx1tj9yrz6Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getRelease(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessors15c80wxji7qdhvcsteytc58m6Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors162pciy5rjslcjghvy6dixyghKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getKotlinNativeCompilerPluginClasspath(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors16h8i8yvcoyu6adqodek0vazlKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getBuild(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors18mluv1jr0hv69fpjuxx3um50Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1a3myc2xcjkjlhq7vkxcb1wimKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1c5recrh4ydarercfvrc3muy7Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1c6dkxwmly6udqdt97zbww23oKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1crcmgpg53bs3tut9tzeov9zsKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getBuildNeeded(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors1eud2e5b0jkh3dw8qmh4qfcjjKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1hfzdi4ma9vie2uwh4a3kprehKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1reh09kjuywvmu13obfx3j2buKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1tp00vwy3b18t8sis549ad9afKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1tqv2q4pf2jtvndip8jmovsi2Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getTestDebug(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessors1uflytzdg655v1wee5c3fac2bKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1vjof8v9qh7n8iscou4k7is8xKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getMain(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessors1yggogshdwj2b4l5q15gok3e5Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors1z2f4o9yf80gcml5izf2eey3cKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors20m89wvqrtvolhrxzuq1utrarKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getArchives(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors22nd5nfyvdym5cuk2xpldoi2mKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors27phlr698eundo6z6a181k5snKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2aaixfn0t69r3qz3o4dq07jfzKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2bjcqrj2vc1c82f7jbep8612wKt {
    method public static org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension getOptionalNpm(org.gradle.api.artifacts.dsl.DependencyHandler);
    method public static void optionalNpm(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.Action<org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension> configure);
  }

  @org.gradle.api.Generated public final class Accessors2el8bmlu41jw63ronusmhkrt2Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getCoreLibraryDesugaring(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2jmauyimrywsraccs6svyvcdcKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getPreBuild(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors2jwo0dgnaoakqwsimerpx1aofKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2kavjgv3svdfvv8ncq8ugtm7fKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2l6hvl1nbnykx9sh3d6f8vhofKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2oadk7let745pm8ahqypkqzlkKt {
    method public static org.gradle.api.tasks.SourceSetContainer getSourceSets(org.gradle.api.Project);
    method public static void sourceSets(org.gradle.api.Project, org.gradle.api.Action<org.gradle.api.tasks.SourceSetContainer> configure);
  }

  @org.gradle.api.Generated public final class Accessors2pet5uyeiajzs3esiox2adeeiKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2s1m7qhtdel2iy5x5gc2gv6f5Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getCheck(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors2tdtobugwuqr0jum6e6do6sqnKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2tnqpmyevgjzykm23uc4xed1eKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2uagmw1g1pkapydqn3mqv3zmsKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2v623o5w2u1ep6dgdw0venon1Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2wma48weg3w77nmiwiqkizib1Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors2xn0wsnv47qerxchr8se4tmemKt {
    method public static void androidComponents(org.gradle.api.Project, org.gradle.api.Action<com.android.build.api.extension.ApplicationAndroidComponentsExtension> configure);
    method public static com.android.build.api.extension.ApplicationAndroidComponentsExtension getAndroidComponents(org.gradle.api.Project);
  }

  @org.gradle.api.Generated public final class Accessors377twfxlhpj2n65rquy9ybeqsKt {
    method public static void android(org.gradle.api.Project, org.gradle.api.Action<com.android.build.gradle.internal.dsl.BaseAppModuleExtension> configure);
    method public static com.android.build.gradle.internal.dsl.BaseAppModuleExtension getAndroid(org.gradle.api.Project);
  }

  @org.gradle.api.Generated public final class Accessors37pl5uow427xtlikrsyjd1w25Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors37wvwosmo7d27zxssbs9t4tjhKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors39fr7j0hcuoihgwsyvq7ybdh5Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3b00icj6uvdwt6la5hcnud6zhKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.DependencyInsightReportTask> getDependencyInsight(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors3cm1tglav0l8iy0w3l2b0s4ubKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3fcbi0ez45h5dse1i3krl0dowKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3l3td12gy8yl8et4d3pm2foqmKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3mqzeyp8ym3jw5pow9o5a8wbiKt {
    method public static org.gradle.api.tasks.TaskProvider<com.android.build.gradle.internal.TaskManager.ConfigAttrTask> getResolveConfigAttr(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors3nu6f75umw33w7r2vzhcs97auKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3pouukprpfkwnevmdoznjnjgKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3pz4940koq6e3pxmbg3j0johnKt {
    method public static org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension getNpm(org.gradle.api.artifacts.dsl.DependencyHandler);
    method public static void npm(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.Action<org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependencyExtension> configure);
  }

  @org.gradle.api.Generated public final class Accessors3sronkepk2fqbctdv22yjx61wKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors3zll2bbsnoa8fa3kk30sz1tj6Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors403wqm47pe76vdz3go1ht9hwgKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getKotlinCompilerClasspath(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors42pm7l2k87m12p8zy6h74p8teKt {
    method public static org.gradle.api.tasks.TaskProvider<com.android.build.gradle.internal.tasks.LintCompile> getCompileLint(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors435kaoxc9z6dez8rq3ratlc8pKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getAndroidTest(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessors45cftp2do14y8dm8cnj0yfjzmKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors49985hyy071qu5jjdlrughl86Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors4a0mpfwmqe3tul22m0p8oduziKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors4jmfq1rio0azu6xedd505jrncKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors4l8n2n29oe4zybr28cs1x5oj9Kt {
    method public static void experimental(org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension, org.gradle.api.Action<org.jetbrains.kotlin.gradle.dsl.ExperimentalExtension> configure);
    method public static org.jetbrains.kotlin.gradle.dsl.ExperimentalExtension getExperimental(org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension);
  }

  @org.gradle.api.Generated public final class Accessors4na4m83uepbofdkmjr3svrut4Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getTest(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessors4txbtkky6y4s1pli0ag7odjhfKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors50inj4uth5r2wvlqx8e5x1pwaKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors56szkqyj0pj9hodxyhxai1twiKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors5bajvj7q4v7i178mhe9lzeakvKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors5cx8iclyvbivcabq86i8mlot5Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getAssemble(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors5dc5ntgnadimckiddcyeoreqKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors5edgtmc3r90bq3u698tmzsu1pKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors5it82xbnlevunuay75ymxzs7aKt {
    method public static org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getSourceSets(org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension);
    method public static void sourceSets(org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension, org.gradle.api.Action<org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>> configure);
  }

  @org.gradle.api.Generated public final class Accessors5r7od1ls1rcal14bwiw1aolf3Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDefault(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors65f8kafswli0f590tdiw3q0afKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors66tuckl8i2sp7ro7pr5j1bvf8Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors671bo543gfh2ornlzu89aieuKt {
    method public static org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry getKotlinTestRegistry(org.gradle.api.Project);
    method public static void kotlinTestRegistry(org.gradle.api.Project, org.gradle.api.Action<org.jetbrains.kotlin.gradle.testing.internal.KotlinTestsRegistry> configure);
  }

  @org.gradle.api.Generated public final class Accessors67svhsqd29cr7gofh6iii7358Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors6ijptz36i787i38pli2t3331aKt {
    method public static org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions getKotlinOptions(com.android.build.gradle.internal.dsl.BaseAppModuleExtension);
    method public static void kotlinOptions(com.android.build.gradle.internal.dsl.BaseAppModuleExtension, org.gradle.api.Action<org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions> configure);
  }

  @org.gradle.api.Generated public final class Accessors6kce2f9onf1yvha3oi0wn04jfKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.DependencyReportTask> getDependencies(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors6qdblb9kodo7xkpnit63f6rysKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors6snhm62r7n14a7hx9kg28spp2Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.Task> getAssembleAndroidTest(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors6xf7u2fq8ma1oc2aqyny7uzpKt {
    method public static org.gradle.api.tasks.TaskProvider<com.android.build.gradle.internal.TaskManager.ConfigAttrTask> getConsumeConfigAttr(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors6yr1cttco028evddx96hi14rtKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getKotlinKlibCommonizerClasspath(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors70qre8uzkvqv2741psvay03jnKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.TaskReportTask> getTasks(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors70r8mlcbmraitcw4ok51hlcocKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors7infqfp3teoqpey20mehldgdKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors7muq3g30c653sf7rkz9dryr8jKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors7ptocb58woyehg9o8deckfhwaKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors7uzds6c74tt3aamvp3ctd1exvKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors7xn4s12ww819qnwmpl4js2yiqKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors80bq34zv7kij1uz5asaskygqfKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidApis(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors886vrqos1tzcbf5rqx2fz02d2Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8db4rcbppbb1yy6mtt8v9m2ncKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8eezma5x1cdao42w0lf3nniuoKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8elni8jtocrseszdxoi987q3yKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8ly3a923edusthvqf63rrme4Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8n74uuntz58ys73sfv8dcl9v7Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8o6jh4ndxsdm0dvucc5nyzvfuKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8rh5iqya1t168oyiaurnwv106Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.configuration.Help> getHelp(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors8s478vwgng6v6a1mno9kdtss0Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.ProjectReportTask> getProjects(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors8txzcd9s3woxdhabspb0x3b0rKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8udtijiw7li1xnbw4r02wb5e9Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8uj3ndtq2d8i7e152fykai0nhKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8ukscp3qixvtx3v08spmy43a7Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8uqkgkm7ckgp0qv5398gg4l3wKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getLintPublish(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors8uzlaa9ndo750hmo4da2vgu2vKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.DefaultTask> getBuildDependents(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors8wibvxrf45u8ctlk1n8stnzxdKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors96b3ii45gitqpy1kb3tvcvtxvKt {
    method public static org.gradle.api.plugins.JavaPluginExtension getJava(org.gradle.api.Project);
    method public static void java(org.gradle.api.Project, org.gradle.api.Action<org.gradle.api.plugins.JavaPluginExtension> configure);
  }

  @org.gradle.api.Generated public final class Accessors9b37gsj0juq9iow77zb8uhf3nKt {
    method public static void devNpm(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.Action<org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension> configure);
    method public static org.jetbrains.kotlin.gradle.targets.js.npm.DevNpmDependencyExtension getDevNpm(org.gradle.api.artifacts.dsl.DependencyHandler);
  }

  @org.gradle.api.Generated public final class Accessors9j6gqdizurr9nvizt13riwln1Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors9mwl32sgjotf7rl8h6096ajqqKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors9upc35ddn1m31thgty51w1nrjKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors9w2ozer55anvjnyzqeem5kktuKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getLintChecks(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors9xbdx9ypglb5iceqwefq3l2uKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.Delete> getClean(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessors9xim6xjdq0ry1lmc4wm5ei8ehKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessors9zr0228lm14tdw0y9jpt4bxkyKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsa1brr1x2mb71037nby3e49y4iKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsa1n3f62ea6htalc9iv94bxq5yKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsa336dwer7ktpfuxs3mc3eu0zaKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsa401bcc4gwgxal0ksgebp3xw9Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsa47105wcmcbzx75lm7p2ciqqbKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsacrb3p7jraavrk4wk82bexge2Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsadomuxnx8m041ger20t73d6m7Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsagp6u59pexh43pm4o8y0l6cydKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getLintClassPath(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsagpwry1th1qhaepy6b9mpwn4hKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsagtxblp9i7cm47izus5ppkyy8Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsagx2x2gmb2j8xaehlel8el3t6Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsah162g79ip2u5r19le6q8e96iKt {
    method public static void buildOutputs(org.gradle.api.Project, org.gradle.api.Action<org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.api.BaseVariantOutput>> configure);
    method public static org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.api.BaseVariantOutput> getBuildOutputs(org.gradle.api.Project);
  }

  @org.gradle.api.Generated public final class Accessorsal1mk2g0azf2ghnj3aq544g1xKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsal7tnw6zwxr0tm9joiwtx3utnKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsaofthkmarv0q41bodk71vcqi7Kt {
    method public static void defaultArtifacts(org.gradle.api.Project, org.gradle.api.Action<org.gradle.api.internal.plugins.DefaultArtifactPublicationSet> configure);
    method public static org.gradle.api.internal.plugins.DefaultArtifactPublicationSet getDefaultArtifacts(org.gradle.api.Project);
  }

  @org.gradle.api.Generated public final class Accessorsapi59imcvi05l3drcisybtjx7Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getAndroidTestDebug(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessorsarwjapzubw4tw5h5kszc4pkc0Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsatsyo0kyow5y9ltl51fs4hr23Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsavogwy6cc4o14piw2cilviz57Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsaw0oyyuyjh9c44ow17xr6or9rKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsb4hb8rrasobofue6j1318fprnKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsbeo6030lxjgicgifn5empbvjeKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getKotlinCompilerPluginClasspath(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsbjzfxoa3vns0zfsjg3ibeiv28Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsbkq15y21l2gbr8ahlelhpfktfKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsblv6cnh57ufgcm8fm78p7f3xtKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsbmy583k9y2oirweo6ih2u7jf2Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask> getBuildEnvironment(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsbp4j8g31qsxo0ekjysvxih5jgKt {
    method public static org.gradle.jvm.toolchain.JavaToolchainService getJavaToolchains(org.gradle.api.Project);
    method public static void javaToolchains(org.gradle.api.Project, org.gradle.api.Action<org.gradle.jvm.toolchain.JavaToolchainService> configure);
  }

  @org.gradle.api.Generated public final class Accessorsbr6csdgbi78dxx91v6i73dtxgKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.jvm.toolchain.internal.task.ShowToolchainsTask> getJavaToolchains(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsbtc8iwv8u9b0f38ikfmodj8nsKt {
    method public static org.gradle.api.reporting.ReportingExtension getReporting(org.gradle.api.Project);
    method public static void reporting(org.gradle.api.Project, org.gradle.api.Action<org.gradle.api.reporting.ReportingExtension> configure);
  }

  @org.gradle.api.Generated public final class Accessorsbv7g6m9lvlbwpguz01lzxkxggKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.reporting.components.ComponentReport> getComponents(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsbyqv0rd7bbuxjncv5k9yklxgbKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.reporting.dependents.DependentComponentsReport> getDependentComponents(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsc0976z2cy1ov67b8nwwgb2d5hKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestUtil(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsc3q3fpz5fg45zfz2x39f40jebKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getAndroidTestRelease(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessorsc5980wyuxta8jxgkn3mvw066hKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsc7pk2waxt3uzxyp4clhgc0b89Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.reporting.model.ModelReport> getModel(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsceahahdd2iycilt5p8hnrag27Kt {
    method public static org.gradle.api.tasks.TaskProvider<com.android.build.gradle.internal.tasks.SourceSetsTask> getSourceSets(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorscg0pe5qj5n05z8nbpwa1znkioKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugCompile(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorscj8cnlwdt7k507876yfc4m1xzKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask> getOutgoingVariants(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorscqbcebcpbinon2jj21i1b8jmyKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorscv0emi5rrra6kxaqc0g9a9a5sKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestApk(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsd0sr4srxcz2z2dbnry06nxm6dKt {
    method public static org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension getPeerNpm(org.gradle.api.artifacts.dsl.DependencyHandler);
    method public static void peerNpm(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.Action<org.jetbrains.kotlin.gradle.targets.js.npm.PeerNpmDependencyExtension> configure);
  }

  @org.gradle.api.Generated public final class Accessorsd6ez5xjielu1wukui4cu58310Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsd7e4odubtwwdqpjhh6pvdtm35Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.tasks.diagnostics.PropertyReportTask> getProperties(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsdbsxdiburo0fnqzew185uq319Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessors> getKotlinDslAccessorsReport(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsdemns0nrfvv4tm1e985ahms6rKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdhblu8rt4vbwuf4rib4cwj9luKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdn3cxth4pwxdn4tudvdi44y9wKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugImplementationDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdpj8xz3zkymtne0z5yiyh2nkhKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdsd01x022smecaiowfk4ic4crKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdu8x1giecu94yrbdkyr7x1tt9Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseApi(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdxf2ycnta2f2sezdnwlz4w3uqKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsdzuf6j7454qh6vkirdekoyoeuKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorse4g34vhchhjlqy8cax2exywi4Kt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.Task> getUninstallAll(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorse8yzkgyr2zhx9ujba0zqeejwbKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.Task> getDeviceCheck(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorseewlrudtkfa7do24224pxou00Kt {
    method public static org.gradle.api.tasks.TaskProvider<com.android.build.gradle.internal.tasks.ExtractProguardFiles> getExtractProguardFiles(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorsefl58oxisxp3764b2iuwx749zKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugAnnotationProcessor(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsen29lp933koq3j6usd6wo2619Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorseow3fdub383u8laby4zg8lstgKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getDebug(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessorsewaxrnnzexseun82uhi4rvmyfKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet> getTestRelease(org.gradle.api.NamedDomainObjectContainer<org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet>);
  }

  @org.gradle.api.Generated public final class Accessorsf0fwxpjuh2ax5osen9xtrb18sKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestApiDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsf2as0uvf57lb8d2ibxd55ftubKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsgdgeyhu4lto3srff28g4d0ksKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestProvided(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorshemjqd071ckhzv4xjw7jv79zKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorshhpkr63joua0zn5i2f2wg23lKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getAndroidTestReleaseRuntimeOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorskd01gg299ptedg0ut0mtnpmaKt {
    method public static org.gradle.api.tasks.TaskProvider<org.gradle.api.Task> getConnectedCheck(org.gradle.api.tasks.TaskContainer);
  }

  @org.gradle.api.Generated public final class Accessorskhq5643o9gqhg39h4w9vkih5Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestCompileOnlyDependenciesMetadata(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorspawkq4fc3bcn833bghq5ebtaKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorss2xknqctb7j80igo2a77igg0Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestReleaseImplementation(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsudq1uh318qqky95gjgywg3z1Kt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getTestDebugWearApp(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class Accessorsv8sku3n0evm97p61uoj1tesfKt {
    method public static org.gradle.api.NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration> getDebugCompileOnly(org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>);
  }

  @org.gradle.api.Generated public final class AndroidApisConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidApis(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidApis(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidApis(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidApis(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidApis(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidApis(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidApis(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidApis(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidApis(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestDebugWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestDebugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestDebugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestReleaseWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestReleaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestUtilConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestUtil(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestUtil(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestUtil(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestUtil(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestUtil(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestUtil(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestUtil(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestUtil(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestUtil(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AndroidTestWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? androidTestWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact androidTestWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class AnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? annotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency annotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void annotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency annotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T annotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? annotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? annotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact annotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact annotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? api(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency api(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void api(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency api(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T api(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? api(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? api(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact api(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact api(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? apiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact apiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact apiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? apk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency apk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void apk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency apk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T apk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? apk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? apk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact apk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact apk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ArchivesConfigurationAccessorsKt {
    method @Deprecated public static org.gradle.api.artifacts.Dependency? archives(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method @Deprecated public static org.gradle.api.artifacts.ExternalModuleDependency archives(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method @Deprecated public static void archives(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method @Deprecated public static org.gradle.api.artifacts.ExternalModuleDependency archives(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method @Deprecated public static <T extends org.gradle.api.artifacts.ModuleDependency> T archives(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method @Deprecated public static org.gradle.api.artifacts.DependencyConstraint? archives(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method @Deprecated public static org.gradle.api.artifacts.DependencyConstraint? archives(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact archives(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact archives(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class CompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? compile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void compile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T compile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? compile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? compile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact compile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact compile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class CompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? compileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void compileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T compileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? compileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? compileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact compileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact compileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class CompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact compileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class CoreLibraryDesugaringConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? coreLibraryDesugaring(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact coreLibraryDesugaring(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact coreLibraryDesugaring(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DebugWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? debugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void debugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency debugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T debugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? debugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact debugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact debugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class DefaultConfigurationAccessorsKt {
    method @Deprecated public static org.gradle.api.artifacts.Dependency? default(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method @Deprecated public static org.gradle.api.artifacts.ExternalModuleDependency default(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method @Deprecated public static void default(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method @Deprecated public static org.gradle.api.artifacts.ExternalModuleDependency default(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method @Deprecated public static <T extends org.gradle.api.artifacts.ModuleDependency> T default(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method @Deprecated public static org.gradle.api.artifacts.DependencyConstraint? default(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method @Deprecated public static org.gradle.api.artifacts.DependencyConstraint? default(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact default(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact default(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? implementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency implementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void implementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency implementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T implementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? implementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? implementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact implementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact implementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact implementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class KotlinCompilerClasspathConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinCompilerClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class KotlinCompilerPluginClasspathConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinCompilerPluginClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class KotlinKlibCommonizerClasspathConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinKlibCommonizerClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class KotlinNativeCompilerPluginClasspathConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact kotlinNativeCompilerPluginClasspath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class LintChecksConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? lintChecks(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintChecks(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void lintChecks(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintChecks(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T lintChecks(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintChecks(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintChecks(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact lintChecks(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact lintChecks(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class LintClassPathConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? lintClassPath(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintClassPath(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void lintClassPath(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintClassPath(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T lintClassPath(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintClassPath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintClassPath(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact lintClassPath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact lintClassPath(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class LintPublishConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? lintPublish(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintPublish(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void lintPublish(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency lintPublish(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T lintPublish(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintPublish(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? lintPublish(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact lintPublish(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact lintPublish(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? provided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency provided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void provided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency provided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T provided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? provided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? provided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact provided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact provided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class ReleaseWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? releaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void releaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency releaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T releaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? releaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact releaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact releaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class RuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? runtimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency runtimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void runtimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency runtimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T runtimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? runtimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? runtimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact runtimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact runtimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class RuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact runtimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestDebugWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testDebugWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testDebugWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseAnnotationProcessorConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseAnnotationProcessor(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseApiConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseApi(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApi(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApi(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseApiDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApiDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseApkConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseApk(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseApk(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseApk(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseCompileConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompile(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompile(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseCompileOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompileOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompileOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseCompileOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseCompileOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseImplementationConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseImplementation(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseImplementation(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseImplementationDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseImplementationDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseProvidedConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseProvided(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseProvided(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestReleaseWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testReleaseWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testReleaseWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestRuntimeOnlyConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testRuntimeOnly(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testRuntimeOnly(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestRuntimeOnlyDependenciesMetadataConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testRuntimeOnlyDependenciesMetadata(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class TestWearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? testWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void testWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency testWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T testWearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? testWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? testWearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact testWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact testWearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

  @org.gradle.api.Generated public final class WearAppConfigurationAccessorsKt {
    method public static org.gradle.api.artifacts.Dependency? wearApp(org.gradle.api.artifacts.dsl.DependencyHandler, Object dependencyNotation);
    method public static org.gradle.api.artifacts.ExternalModuleDependency wearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static void wearApp(org.gradle.api.artifacts.dsl.DependencyHandler, org.gradle.api.provider.Provider<?> dependencyNotation, org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency> dependencyConfiguration);
    method public static org.gradle.api.artifacts.ExternalModuleDependency wearApp(org.gradle.api.artifacts.dsl.DependencyHandler, String group, String name, optional String? version, optional String? configuration, optional String? classifier, optional String? ext, optional org.gradle.api.Action<org.gradle.api.artifacts.ExternalModuleDependency>? dependencyConfiguration);
    method public static <T extends org.gradle.api.artifacts.ModuleDependency> T wearApp(org.gradle.api.artifacts.dsl.DependencyHandler, T dependency, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> dependencyConfiguration);
    method public static org.gradle.api.artifacts.DependencyConstraint? wearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation);
    method public static org.gradle.api.artifacts.DependencyConstraint? wearApp(org.gradle.api.artifacts.dsl.DependencyConstraintHandler, Object constraintNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.DependencyConstraint,kotlin.Unit> block);
    method public static org.gradle.api.artifacts.PublishArtifact wearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation);
    method public static org.gradle.api.artifacts.PublishArtifact wearApp(org.gradle.api.artifacts.dsl.ArtifactHandler, Object artifactNotation, kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.ConfigurablePublishArtifact,kotlin.Unit> configureAction);
  }

}


// Signature format: 4.0
package  {

  public final class MeowoolHomeKt {
    method public static error.NonExistentClass! getMeowoolHomeDir(org.gradle.api.Project);
  }

  public final class MeowoolSpecsKt {
    method public static error.NonExistentClass! gradleToolkitWithMeowoolManualSpec(org.gradle.api.initialization.Settings, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void gradleToolkitWithMeowoolManualSpec(org.gradle.api.Project, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static error.NonExistentClass! gradleToolkitWithMeowoolSpec(org.gradle.api.initialization.Settings, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void gradleToolkitWithMeowoolSpec(org.gradle.api.Project, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void useMeowoolManualSpec(error.NonExistentClass, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> configuration);
    method public static void useMeowoolSpec(error.NonExistentClass, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> configuration);
  }

  public final class NdkObfuscateKt {
    method public static void enableNdkObfuscate(com.android.build.gradle.BaseExtension, NdkObfuscator obfuscator);
  }

  public abstract sealed class NdkObfuscator {
    method public final java.util.List<java.lang.String> getFlags();
    property public final java.util.List<java.lang.String> flags;
  }

  public static final class NdkObfuscator.Armariris extends NdkObfuscator {
    ctor public NdkObfuscator.Armariris(optional boolean flatten, optional boolean split, optional int splitLoop, optional boolean insnSubstitution, optional int insnSubstitutionLoop, optional boolean bogusControlFlow, optional int bogusControlFlowLoop, optional int bogusControlFlowProbability, optional boolean stringObfuscate, optional long seed);
  }

  public static final class NdkObfuscator.Goron extends NdkObfuscator {
    ctor public NdkObfuscator.Goron(optional boolean flatten, optional boolean indirectJump, optional boolean indirectCall, optional boolean indirectGetVariable, optional boolean stringObfuscate);
  }

  public static final class NdkObfuscator.Hikari extends NdkObfuscator {
    ctor public NdkObfuscator.Hikari(optional boolean flatten, optional boolean split, optional boolean functionCallObfuscate, optional boolean functionWrapper, optional int functionWrapperProbability, optional int functionWrapperLoop, optional boolean antiClassDump, optional boolean insnSubstitution, optional int insnSubstitutionLoop, optional boolean bogusControlFlow, optional int bogusControlFlowLoop, optional int bogusControlFlowProbability, optional boolean stringObfuscate, optional boolean indirectBranching);
  }

}

package com.meowool.gradle.toolkit.internal {

  public final class MeowoolCopyrightKt {
  }

  public final class MeowoolManualSpec extends com.meowool.gradle.toolkit.internal.MeowoolPresetSpec {
    method public boolean useAndroidPreset();
    method public boolean useOptInPreset();
    method public boolean usePublicationsPreset();
    method public void useRepositoriesPreset();
    method public boolean useSpotlessPreset();
    property public java.util.List<kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit>> configurations;
    property public boolean enabledMetalava;
    property public boolean enabledPublisher;
    property public boolean enabledSpotless;
    property public java.util.List<java.lang.String> optIn;
    property public kotlin.jvm.functions.Function2<org.gradle.api.artifacts.dsl.RepositoryHandler,org.gradle.api.Project,kotlin.Unit> repositories;
  }

  public class MeowoolPresetSpec {
    method public final void disableMetalava();
    method public final void disablePublisher();
    method public final void disableSpotless();
    method public final void enableMetalava();
    method public final void enablePublisher();
    method public final void enableSpotless();
    method public java.util.List<kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit>> getConfigurations();
    method public boolean getEnabledMetalava();
    method public boolean getEnabledPublisher();
    method public boolean getEnabledSpotless();
    method public final String? getLicenseHeader();
    method public final String? getLicenseUrl();
    method public java.util.List<java.lang.String> getOptIn();
    method public kotlin.jvm.functions.Function2<org.gradle.api.artifacts.dsl.RepositoryHandler,org.gradle.api.Project,kotlin.Unit> getRepositories();
    method public final boolean isOpenSourceProject();
    method public final void licenseHeader(error.NonExistentClass file);
    method public final void licenseHeader(error.NonExistentClass path);
    method public final void openSourceProject(String licenseUrl);
    method protected final kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit> presetAndroid();
    method protected final kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit> presetMetalava();
    method protected final java.util.List<java.lang.String> presetOptIn();
    method protected final kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit> presetPublications();
    method protected final kotlin.jvm.functions.Function2<org.gradle.api.artifacts.dsl.RepositoryHandler,org.gradle.api.Project,kotlin.Unit> presetRepositories();
    method protected final kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit> presetSpotless();
    method public final void privateProject();
    method public void setEnabledMetalava(boolean enabledMetalava);
    method public void setEnabledPublisher(boolean enabledPublisher);
    method public void setEnabledSpotless(boolean enabledSpotless);
    method public final void setLicenseHeader(String? licenseHeader);
    method public final void setLicenseUrl(String? licenseUrl);
    method public final void setOpenSourceProject(boolean isOpenSourceProject);
    method public void setRepositories(kotlin.jvm.functions.Function2<? super org.gradle.api.artifacts.dsl.RepositoryHandler,? super org.gradle.api.Project,kotlin.Unit> repositories);
    method public final void spotless(kotlin.jvm.functions.Function2<? super com.diffplug.gradle.spotless.SpotlessExtension,? super org.gradle.api.Project,kotlin.Unit> configuration);
    property public java.util.List<kotlin.jvm.functions.Function1<error.NonExistentClass,kotlin.Unit>> configurations;
    property public boolean enabledMetalava;
    property public boolean enabledPublisher;
    property public boolean enabledSpotless;
    property public final boolean isOpenSourceProject;
    property public final String? licenseHeader;
    property public final String? licenseUrl;
    property public java.util.List<java.lang.String> optIn;
    property public kotlin.jvm.functions.Function2<org.gradle.api.artifacts.dsl.RepositoryHandler,org.gradle.api.Project,kotlin.Unit> repositories;
  }

}


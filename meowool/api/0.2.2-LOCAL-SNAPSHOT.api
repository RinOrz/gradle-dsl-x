// Signature format: 4.0
package  {

  public final class MeowoolHomeKt {
    method public static error.NonExistentClass! getMeowoolHomeDir(org.gradle.api.Project);
  }

  public final class MeowoolSpecsKt {
    method public static error.NonExistentClass! gradleToolkitWithMeowoolManualSpec(org.gradle.api.initialization.Settings, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void gradleToolkitWithMeowoolManualSpec(org.gradle.api.Project, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static error.NonExistentClass! gradleToolkitWithMeowoolSpec(org.gradle.api.initialization.Settings, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void gradleToolkitWithMeowoolSpec(org.gradle.api.Project, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> spec, optional kotlin.jvm.functions.Function1<? super error.NonExistentClass,kotlin.Unit> configuration);
    method public static void useMeowoolManualSpec(error.NonExistentClass, kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolManualSpec,kotlin.Unit> configuration);
    method public static void useMeowoolSpec(error.NonExistentClass, optional kotlin.jvm.functions.Function1<? super com.meowool.gradle.toolkit.internal.MeowoolPresetSpec,kotlin.Unit> configuration);
  }

  public final class NdkObfuscateKt {
    method public static void enableNdkObfuscate(com.android.build.gradle.BaseExtension, NdkObfuscator obfuscator);
  }

  public abstract sealed class NdkObfuscator {
    method public final java.util.List<java.lang.String> getFlags();
    property public final java.util.List<java.lang.String> flags;
  }

  public static final class NdkObfuscator.Armariris extends NdkObfuscator {
    ctor public NdkObfuscator.Armariris(optional boolean flatten, optional boolean split, optional int splitLoop, optional boolean insnSubstitution, optional int insnSubstitutionLoop, optional boolean bogusControlFlow, optional int bogusControlFlowLoop, optional int bogusControlFlowProbability, optional boolean stringObfuscate, optional long seed);
  }

  public static final class NdkObfuscator.Goron extends NdkObfuscator {
    ctor public NdkObfuscator.Goron(optional boolean flatten, optional boolean indirectJump, optional boolean indirectCall, optional boolean indirectGetVariable, optional boolean stringObfuscate);
  }

  public static final class NdkObfuscator.Hikari extends NdkObfuscator {
    ctor public NdkObfuscator.Hikari(optional boolean flatten, optional boolean split, optional boolean functionCallObfuscate, optional boolean functionWrapper, optional int functionWrapperProbability, optional int functionWrapperLoop, optional boolean antiClassDump, optional boolean insnSubstitution, optional int insnSubstitutionLoop, optional boolean bogusControlFlow, optional int bogusControlFlowLoop, optional int bogusControlFlowProbability, optional boolean stringObfuscate, optional boolean indirectBranching);
  }

}

